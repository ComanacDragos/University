     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, printf
     5                                  import exit msvcrt.dll
     6                                  import printf msvcrt.dll
     7                                  
     8                                  ;%include "string_to_number.asm"
     9                                  
    10                                  segment data use32 class=data
    11                                  
    12 00000000 313031303031313162-         string db '10100111b', '01100011b', '110b', '101011b', 0
    12 00000009 303131303030313162-
    12 00000012 313130623130313031-
    12 0000001B 316200             
    13 0000001E 25580A00                    f db "%X", 10, 0
    14 00000022 02                          doi db 2
    15 00000023 <res 00000064>              new_string resb 100
    16                                      
    17                                  segment code use32 class=code
    18                                  
    19                                      start:
    20                                  
    21 00000000 BE[00000000]                mov ESI, string
    22 00000005 BF[23000000]                mov EDI, new_string
    23                                      
    24                                      loop1:
    25                                  
    26 0000000A 803E00                          cmp byte [ESI], 0
    27 0000000D 741B                            je endLoop1
    28                                          
    29 0000000F 89F2                            mov EDX, ESI
    30                                          
    31                                          loop2:
    32 00000011 AC                                  lodsb
    33 00000012 3C62                                cmp AL, 'b'
    34 00000014 7402                                je endLoop2
    35 00000016 EBF9                            jmp loop2
    36                                          endLoop2:
    37                                          
    38 00000018 89F1                            mov ECX, ESI
    39 0000001A 29D1                            sub ECX, EDX
    40 0000001C 49                              dec ECX
    41                                          
    42 0000001D 51                              push ECX
    43 0000001E 52                              push EDX
    44 0000001F E82F000000                      call string_to_number
    45 00000024 83C408                          add ESP, 4*2
    46                                          
    47 00000027 AA                              stosb
    48                                          
    49 00000028 EBE0                            jmp loop1
    50                                          endLoop1:
    51                                          
    52                                        
    53                                              
    54 0000002A BE[23000000]                    mov ESI, new_string
    55                                          
    56                                          loop3:
    57 0000002F 803E00                              cmp byte [ESI], 0
    58 00000032 7417                                je theEnd
    59 00000034 B800000000                          mov EAX, 0
    60 00000039 AC                                  lodsb
    61                                              
    62 0000003A 50                                  push EAX
    63 0000003B 68[1E000000]                        push f
    64 00000040 FF15[00000000]                      call [printf]
    65 00000046 83C408                              add ESP, 4*2
    66 00000049 EBE4                                jmp loop3
    67                                      
    68                                      theEnd:
    69 0000004B 6A00                        push dword 0
    70 0000004D FF15[00000000]              call [exit]
    71                                  
    72                                              
    73                                    string_to_number:
    74                                     
    75 00000053 8B542404                    mov EDX, [ESP+4]
    76 00000057 8B4C2408                    mov ECX, [ESP+8]
    77                                      
    78 0000005B 8D540AFF                    lea EDX, [EDX+ECX-1]
    79                                      
    80 0000005F B001                        mov AL, 1
    81 00000061 B300                        mov BL, 0
    82                                      
    83                                      l:
    84 00000063 803A30                          cmp byte [EDX], '0'
    85 00000066 7402                            je endl
    86 00000068 00C3                            add BL, AL
    87                                         
    88                                          endl:
    89 0000006A F625[22000000]                  mul byte [doi]
    90 00000070 4A                              dec EDX
    91 00000071 E2F0                            loop l
    92                                      
    93 00000073 B800000000                  mov EAX, 0
    94 00000078 88D8                        mov AL, BL
    95 0000007A C3                          ret
