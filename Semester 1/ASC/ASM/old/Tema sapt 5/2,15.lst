     1                                  bits 32
     2                                  global start
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  
     6                                  segment data use32 class=data
     7                                  
     8 00000000 01                          a db 1
     9 00000001 02                          b db 2
    10 00000002 03                          c db 3
    11 00000003 0A000000                    e dd 10
    12 00000007 1600000000000000            x dq 22
    13                                    
    14                                  segment code use32 class=code
    15                                      ;x-(a*b*25+c*3)/(a+b)+e - unsigned representation
    16                                      start:
    17 00000000 A0[00000000]                mov AL,[a] ; AL=a
    18 00000005 F625[01000000]              mul byte [b] ; AX=a*b
    19 0000000B 66BB1900                    mov BX,25 ; BX=25
    20 0000000F 66F7E3                      mul word BX ; DX:AX=a*b*25
    21 00000012 6689C3                      mov BX,AX ; DX:BX=a*b*25
    22                                      
    23 00000015 B003                        mov AL,3 ; AL=3
    24 00000017 F625[02000000]              mul byte [c] ; AX=3*c
    25 0000001D 66B90000                    mov CX,0 ; CX:AX=c*3
    26                                      
    27 00000021 6601C3                      add BX,AX
    28 00000024 6611CA                      adc DX,CX ; DX:BX=a*b*25+c*3
    29                                      
    30 00000027 6689D8                      mov AX,BX ; DX:AX=a*b*25+c*3
    31                                      
    32 0000002A 8A1D[00000000]              mov BL,[a] ; BL=a
    33 00000030 021D[01000000]              add BL,[b] ; BL=a+b
    34 00000036 B700                        mov BH,0 ; BX=a+b
    35                                      
    36 00000038 66F7F3                      div BX ; AX=(a*b*25+c*3)/(a+b) DX=(a*b*25+c*3)%(a+b)
    37 0000003B 66BA0000                    mov DX,0 ; DX:AX=(a*b*25+c*3)/(a+b)
    38 0000003F 6652                        push DX
    39 00000041 6650                        push AX
    40 00000043 58                          pop EAX ; EAX=(a*b*25+c*3)/(a+b)
    41 00000044 BA00000000                  mov EDX,0 ; EDX:EAX=(a*b*25+c*3)/(a+b)
    42                                      
    43 00000049 8B1D[07000000]              mov EBX, dword [x]
    44 0000004F 8B0D[0B000000]              mov ECX, dword [x+4] ; ECX:EBX= x
    45                                      
    46 00000055 29C3                        sub EBX,EAX
    47 00000057 19D1                        sbb ECX,EDX ;  ECX:EBX=x-(a*b*25+c*3)/(a+b)
    48                                      
    49 00000059 A1[03000000]                mov EAX,[e] ; EAX=e
    50 0000005E BA00000000                  mov EDX,0 ; EDX:EAX=e
    51                                      
    52 00000063 01C3                        add EBX,EAX
    53 00000065 11D1                        adc ECX,EDX ; ECX:EBX=x-(a*b*25+c*3)/(a+b)+e
    54                                      
    55 00000067 6A00                        push dword 0
    56 00000069 FF15[00000000]              call [exit]
