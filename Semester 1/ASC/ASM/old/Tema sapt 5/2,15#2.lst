     1                                  bits 32
     2                                  global start
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  
     6                                  segment data use32 class=data
     7                                  
     8 00000000 01                          a db 1
     9 00000001 02                          b db 2
    10 00000002 03                          c db 3
    11 00000003 0A000000                    e dd 10
    12 00000007 1600000000000000            x dq 22
    13                                    
    14                                  segment code use32 class=code
    15                                      ;x-(a*b*25+c*3)/(a+b)+e - signed representation
    16                                      start:
    17 00000000 A0[00000000]                mov AL,[a] ; AL=a
    18 00000005 F62D[01000000]              imul byte [b] ; AX=a*b
    19 0000000B 66BB1900                    mov BX,25 ; BX=25
    20 0000000F 66F7EB                      imul word BX ; DX:AX=a*b*25
    21 00000012 6689C3                      mov BX,AX ; DX:BX=a*b*25
    22                                      
    23 00000015 B003                        mov AL,3 ; AL=3
    24 00000017 F62D[02000000]              imul byte [c] ; AX=3*c
    25 0000001D 66B90000                    mov CX,0 ; CX:AX=c*3
    26                                      
    27 00000021 6601C3                      add BX,AX
    28 00000024 6611CA                      adc DX,CX ; DX:BX=a*b*25+c*3
    29                                      
    30 00000027 A0[00000000]                mov AL,[a] ; AL=a
    31 0000002C 0205[01000000]              add AL,[b] ; AL=a+b
    32                                      
    33 00000032 6698                        cbw ; AX=a+b
    34                                      
    35 00000034 6689C1                      mov CX,AX ; CX=a+b
    36 00000037 6689D8                      mov AX,BX ; DX:AX=a*b*25+c*3
    37 0000003A 66F7F9                      idiv CX ; AX=(a*b*25+c*3)/(a+b)
    38                                      
    39 0000003D 98                          cwde ; EAX=(a*b*25+c*3)/(a+b)
    40 0000003E 99                          cdq ; EDX:EAX=(a*b*25+c*3)/(a+b)
    41                                      
    42 0000003F 8B1D[07000000]              mov EBX, dword [x]
    43 00000045 8B0D[0B000000]              mov ECX, dword [x+4] ; ECX:EBX=x
    44                                      
    45 0000004B 29C3                        sub EBX,EAX
    46 0000004D 19D1                        sbb ECX,EDX ; ECX:EBX=x-(a*b*25+c*3)/(a+b)
    47                                      
    48 0000004F A1[03000000]                mov EAX,[e]
    49 00000054 99                          cdq ; EDX:EAX=e
    50                                      
    51 00000055 01C3                        add EBX,EAX
    52 00000057 11D1                        adc ECX,EDX ; ECX:EBX=x-(a*b*25+c*3)/(a+b)+e
    53                                      
    54                                      
    55                                      
    56                                      
    57                                      
    58 00000059 6A00                        push dword 0
    59 0000005B FF15[00000000]              call [exit]
