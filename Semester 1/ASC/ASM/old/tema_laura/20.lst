     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, scanf, printf
     5                                  import exit msvcrt.dll
     6                                  import scanf msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  
     9                                  segment data use32 class=data
    10 00000000 010000000200000003-         s1 dd 1,2,3, 0
    10 00000009 00000000000000     
    11                                      
    12 00000010 613D2000                    msg1 db "a= ", 0
    13 00000014 623D2000                    msg2 db "b= ", 0
    14 00000018 5468652073756D206F-         msg3 db "The sum of low bytes is: ", 0
    14 00000021 66206C6F7720627974-
    14 0000002A 65732069733A2000   
    15 00000032 0A5468652064696620-         msg4 db 10, "The dif of high bytes is: ", 0
    15 0000003B 6F6620686967682062-
    15 00000044 797465732069733A20-
    15 0000004D 00                 
    16                                      
    17 0000004E 257800                      f_x db "%x", 0
    18                                      ;a resd 1
    19 00000051 <res 00000004>              b resd 1
    20                                      
    21 00000055 01                          a db 1
    22 00000056 04                          db 4
    23                                      
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 66A1[56000000]              mov ax, [a+1]
    27                                     
    28                                      
    29                                      
    30                                      
    31 00000006 68[10000000]                push msg1
    32 0000000B FF15[00000000]              call [printf]
    33 00000011 83C404                      add ESP, 4
    34                                      
    35 00000014 68[55000000]                push a
    36 00000019 68[4E000000]                push f_x
    37 0000001E FF15[00000000]              call [scanf]
    38 00000024 83C408                      add ESP, 4*2
    39                                      
    40 00000027 68[14000000]                push msg2
    41 0000002C FF15[00000000]              call [printf]
    42 00000032 83C404                      add ESP, 4
    43                                      
    44 00000035 68[51000000]                push b
    45 0000003A 68[4E000000]                push f_x
    46 0000003F FF15[00000000]              call [scanf]
    47 00000045 83C408                      add ESP, 4*2
    48                                      
    49 00000048 68[18000000]                push msg3
    50 0000004D FF15[00000000]              call [printf]
    51 00000053 83C404                      add ESP, 4
    52                                      
    53                                      ;mov EAX, 0
    54 00000056 66A1[55000000]              mov AX, [a]
    55 0000005C 668B1D[51000000]            mov BX, [b]
    56                                      
    57 00000063 6601D8                      add AX, BX
    58                                      
    59                                      
    60 00000066 50                          push EAX
    61 00000067 68[4E000000]                push f_x
    62 0000006C FF15[00000000]              call [printf]
    63 00000072 83C408                      add ESP, 4*2
    64                                      
    65 00000075 68[32000000]                push msg4
    66 0000007A FF15[00000000]              call [printf]
    67 00000080 83C404                      add ESP,4
    68                                      
    69                                      ;mov EAX, 0
    70 00000083 66A1[57000000]              mov AX, [a+2]
    71 00000089 668B1D[53000000]            mov BX, [b+2]
    72                                      
    73 00000090 6629D8                      sub AX, BX
    74                                      
    75 00000093 50                          push EAX
    76 00000094 68[4E000000]                push f_x
    77 00000099 FF15[00000000]              call [printf]
    78 0000009F 83C408                      add ESP, 4*2
    79                                      
    80                                      
    81 000000A2 6A00                        push dword 0
    82 000000A4 FF15[00000000]              call [exit]
