     1                                  bits 32
     2                                  global start
     3                                  extern exit
     4                                  import exit msvcrt.dll
     5                                  
     6                                  segment data use32 class=data
     7                                          
     8 00000000 BE9B5777                    a dd 01110111010101111001101110111110b
     9 00000004 5777BE9B                    b dd 10011011101111100111011101010111b
    10 00000008 0000000000000000            c dq 0
    11                                  
    12                                  segment code use32 class=code   
    13                                  
    14                                  ;Given the doublewords A and B, obtain the quadword C as follows:
    15                                  ;the bits 0-7 of C are the same as the bits 21-28 of A
    16                                  ;the bits 8-15 of C are the same as the bits 23-30 of B complemented
    17                                  ;the bits 16-21 of C have the value 101010
    18                                  ;the bits 22-31 of C have the value 0
    19                                  ;the bits 32-42 of C are the same as the bits 21-31 of B
    20                                  ;the bits 43-55 of C are the same as the bits 1-13 of A
    21                                  ;the bits 56-63 of C are the same as the bits 24-31 of the result A XOR 0ABh
    22                                  ;    28-31  24-27  20-23  16-19   12-15  8-11   4-7    0-3                                  
    23                                  ; a = 0111   0111   0101   0111    1001  1011  1011   1110
    24                                  ;       7      7       5     7       9     B     B      E
    25                                  ; b = 1001   1011   1011   1110    0111  0111  0101   0111
    26                                  ;       9      B      B      E       7     7     5      7   
    27                                      start:
    28 00000000 A1[00000000]                mov EAX, [a]
    29 00000005 BB0000E01F                  mov EBX, 00011111111000000000000000000000b
    30 0000000A 21D8                        and EAX,EBX ; EAX = a[21-28]
    31                                      
    32 0000000C B115                        mov CL,21
    33 0000000E D3E8                        shr EAX,CL 
    34 00000010 0905[08000000]              or dword [c],EAX ; c[0-7] = a[21-28]
    35                                      
    36 00000016 A1[04000000]                mov EAX, [b]
    37 0000001B F7D0                        not EAX
    38 0000001D 83C001                      add EAX,1 ; EAX = b.complemented
    39                                      
    40 00000020 BB0000807F                  mov EBX, 01111111100000000000000000000000b
    41 00000025 21D8                        and EAX,EBX
    42 00000027 C1E80F                      shr EAX,15 ; EAX[8-15] = b.complemented[23-30]
    43 0000002A 0905[08000000]              or dword [c], EAX ; c[8-15] = b.complemented[23-30]
    44                                      
    45 00000030 B800002A00                  mov EAX, 00000000001010100000000000000000b
    46 00000035 0905[08000000]              or dword [c], EAX ; c[16-21] = 101010
    47                                      
    48                                      ;bits 22-31 are already 0 because the starting value of c was 0
    49                                      
    50 0000003B A1[04000000]                mov EAX, [b]
    51 00000040 BB0000E0FF                  mov EBX, 11111111111000000000000000000000b
    52 00000045 21D8                        and EAX,EBX
    53 00000047 C1E815                      shr EAX,21
    54 0000004A 0905[0C000000]              or dword [c+4], EAX ; c[32-42] = b[21-31]
    55                                      
    56 00000050 A1[00000000]                mov EAX, [a]
    57 00000055 BBFE3F0000                  mov EBX, 00000000000000000011111111111110b
    58 0000005A 21D8                        and EAX,EBX
    59 0000005C C1E00A                      shl EAX,10
    60 0000005F 0905[0C000000]              or dword [c+4], EAX ; c[43-55] = a[1-13]
    61                                     
    62 00000065 A1[00000000]                mov EAX, [a]
    63 0000006A 35AB000000                  xor EAX, 0ABh 
    64 0000006F C1E818                      shr EAX, 24
    65 00000072 A2[0F000000]                mov [c+7],AL ; c[56-63] = A xor 0ABh [24-31]
    66                                      
    67                                       
    68                                      
    69                                      
    70 00000077 8B0D[08000000]              mov ECX, dword [c]
    71 0000007D 8B15[0C000000]              mov EDX, dword [c+4] ; EDX:ECX = c
    72                                      
    73 00000083 6A00                        push dword 0
    74 00000085 FF15[00000000]              call [exit]
