     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, scanf, printf
     5                                  import exit msvcrt.dll
     6                                  import scanf msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  
     9                                  segment data use32 class=data:
    10                                  
    11 00000000 47697665206E756D62-         message db "Give number: ", 0
    11 00000009 65723A2000         
    12                                      
    13 0000000E <res 00000004>              a resd 1
    14 00000012 <res 00000004>              b resd 1
    15                                      
    16 00000016 256400                      f_d db "%d", 0
    17 00000019 546865206E756D6265-         f_h db "The number in base 16 is %x", 0
    17 00000022 7220696E2062617365-
    17 0000002B 203136206973202578-
    17 00000034 00                 
    18                                  
    19                                  
    20                                  segment code use32 class=code:
    21                                     ; Read two numbers a and b (in base 10) from the keyboard and calculate a+b. Display the result in base 16
    22                                  
    23                                      start:
    24                                      
    25 00000000 68[00000000]                push message
    26 00000005 FF15[00000000]              call [printf]
    27 0000000B 83C404                      add ESP, 4*1
    28                                      
    29 0000000E 68[0E000000]                push a
    30 00000013 68[16000000]                push f_d
    31 00000018 FF15[00000000]              call [scanf]
    32 0000001E 83C408                      add ESP, 4*2
    33                                      
    34                                      
    35 00000021 68[00000000]                push message
    36 00000026 FF15[00000000]              call [printf]
    37 0000002C 83C404                      add ESP, 4*1
    38                                      
    39 0000002F 68[12000000]                push b
    40 00000034 68[16000000]                push f_d
    41 00000039 FF15[00000000]              call [scanf]
    42 0000003F 83C408                      add ESP, 4*2
    43                                      
    44 00000042 A1[0E000000]                mov EAX, [a]
    45 00000047 0305[12000000]              add EAX, [b]
    46                                      
    47                                     
    48                                      
    49 0000004D 50                          push EAX
    50 0000004E 68[19000000]                push f_h
    51 00000053 FF15[00000000]              call [printf]
    52 00000059 83C408                      add ESP, 4*2
    53                                      
    54                                      
    55 0000005C 6A00                        push dword 0
    56 0000005E FF15[00000000]              call [exit]
