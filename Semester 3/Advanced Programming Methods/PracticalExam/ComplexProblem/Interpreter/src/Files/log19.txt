Program: 1
Execution stack
(
ref(int) v1;
ref(int) v2;
ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
ref(int) v2;
ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
ref(int) v2;
ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
ref(int) v2;
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
ref(int) v2;
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
ref(int) v2;
)
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
ref(int) v2;
)
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
)
(
ref(int) v2;
)
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v1;
)
(
ref(int) v2;
)
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v2;
)
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v2;
)
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
v2 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v3;
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
v2 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v3;
)
(
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
v2 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
ref(int) v3;
)
(
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
v2 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
int cnt;
)
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
new(v1, 2);
new(v2, 3);
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
new(v1, 2);
new(v2, 3);
)
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
new(v1, 2);
new(v2, 3);
)
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
new(v1, 2);
)
(
new(v2, 3);
)
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
new(v1, 2);
)
(
new(v2, 3);
)
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
Latch table



Program: 1
Execution stack
(
new(v2, 3);
)
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
1 -> 2
Latch table



Program: 1
Execution stack
(
new(v2, 3);
)
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
Out
File table
Heap
1 -> 2
Latch table



Program: 1
Execution stack
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Out
File table
Heap
1 -> 2
2 -> 3
Latch table



Program: 1
Execution stack
(
new(v3, 4);
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Out
File table
Heap
1 -> 2
2 -> 3
Latch table



Program: 1
Execution stack
(
new(v3, 4);
)
(
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Out
File table
Heap
1 -> 2
2 -> 3
Latch table



Program: 1
Execution stack
(
new(v3, 4);
)
(
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
Out
File table
Heap
1 -> 2
2 -> 3
Latch table



Program: 1
Execution stack
(
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table



Program: 1
Execution stack
(
newLatch(cnt, readHeap(v2));
)
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table



Program: 1
Execution stack
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
)
(
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
)
(
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
writeHeap(v1, (readHeap(v1) * 10));
print(readHeap(v1));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
)
(
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
writeHeap(v1, (readHeap(v1) * 10));
)
(
print(readHeap(v1));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
)
(
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
writeHeap(v1, (readHeap(v1) * 10));
)
(
print(readHeap(v1));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 2
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
print(readHeap(v1));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 3
Execution stack
(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
print(readHeap(v1));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 3
Execution stack
(
writeHeap(v2, (readHeap(v2) * 10));
print(readHeap(v2));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
)
(
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
print(readHeap(v1));
)
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 3
Execution stack
(
writeHeap(v2, (readHeap(v2) * 10));
)
(
print(readHeap(v2));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
fork(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
)
(
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
print(readHeap(v1));
)
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 3
Execution stack
(
writeHeap(v2, (readHeap(v2) * 10));
)
(
print(readHeap(v2));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
File table
Heap
1 -> 20
2 -> 3
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 3
Execution stack
(
print(readHeap(v2));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 4
Execution stack
(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
await(cnt);
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 2
Execution stack
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 3
Execution stack
(
print(readHeap(v2));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 4
Execution stack
(
writeHeap(v3, (readHeap(v3) * 10));
print(readHeap(v3));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 3



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 2



Program: 2
Execution stack
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 2



Program: 3
Execution stack
(
print(readHeap(v2));
)
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 2



Program: 4
Execution stack
(
writeHeap(v3, (readHeap(v3) * 10));
)
(
print(readHeap(v3));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 2



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 2



Program: 3
Execution stack
(
print(readHeap(v2));
)
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 2



Program: 4
Execution stack
(
writeHeap(v3, (readHeap(v3) * 10));
)
(
print(readHeap(v3));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
File table
Heap
1 -> 20
2 -> 30
3 -> 4
Latch table
1 -> 2



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 2



Program: 3
Execution stack
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 2



Program: 4
Execution stack
(
print(readHeap(v3));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 2



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 2



Program: 3
Execution stack
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 2



Program: 4
Execution stack
(
print(readHeap(v3));
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 2



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 3
Execution stack
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 4
Execution stack
(
print(readHeap(v3));
)
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 4
Execution stack
(
print(readHeap(v3));
)
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 4
Execution stack
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 4
Execution stack
(
countDown(cnt);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 1



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 4
Execution stack
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
await(cnt);
)
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
print(100);
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
print(100);
)
(
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
print(100);
)
(
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
100
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
countDown(cnt);
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
100
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
countDown(cnt);
)
(
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
100
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
countDown(cnt);
)
(
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
100
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
100
1
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
(
print(100);
)
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
100
1
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



Program: 1
Execution stack
Symbols table
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
Out
20
2
30
3
40
4
100
1
100
File table
Heap
1 -> 20
2 -> 30
3 -> 40
Latch table
1 -> 0



